datasource db {
  provider = "mongodb"
  url      = env("MONGO_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

model Product {
  id        String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt DateTime   @default(now())
  barcode   String     @unique
  name      String
  price     Float
  cartItems CartItem[]
}

// ? for optional attributes
model Customer {
  id           String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt    DateTime   @default(now())
  checkedOutAt DateTime?
  canceledAt   DateTime?
  cartItems    CartItem[]
}



model CartItem {
  id         String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
}




model Account {
  id                 String  @id @default(dbgenerated()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}